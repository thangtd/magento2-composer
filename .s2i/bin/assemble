#!/bin/bash -e
# The assemble script builds the application artifacts from a source and 
# places them into appropriate directories inside the image.

mkdir -p /tmp/preassemble

# Execute the default S2I script
source ${STI_SCRIPTS_PATH}/assemble

mkdir -p /tmp/postassemble

# Install Composer
TEMPFILE=$(mktemp)
RETRIES=6
for ((i=0; i<$RETRIES; i++)); do

if [ -z "$COMPOSER_INSTALLER" ]; then
  export COMPOSER_INSTALLER="https://getcomposer.org/installer"
fi

echo "Downloading $COMPOSER_INSTALLER, attempt $((i+1))/$RETRIES"
curl -o $TEMPFILE $COMPOSER_INSTALLER && break
sleep 10
done
if [[ $i == $RETRIES ]]; then
echo "Download failed, giving up."
exit 1
fi
php <$TEMPFILE

if [ "$(ls -a /tmp/artifacts/ 2>/dev/null)" ]; then
echo "Restoring build artifacts"
mv /tmp/artifacts/* $HOME/
fi

# Change the repo mirror if provided
if [ -n "$COMPOSER_MIRROR" ]; then
./composer.phar config -g repositories.packagist composer $COMPOSER_MIRROR
fi

mkdir -p ./.composer/

export COMPOSER_HOME=./.composer/

cp ./auth.json ./.composer/

echo "Creating Magento project ..."

./composer.phar create-project --repository-url=https://repo.magento.com/ magento/project-community-edition ./

echo "Updating permissions for Magento folder ..."

find ./var ./vendor ./pub/static ./pub/media ./app/etc -type f -exec chmod g+w {} \; && find ./var ./vendor ./pub/static ./pub/media ./app/etc -type d -exec chmod 775 {} \; && chmod u+x ./bin/magento

echo "Installing Magento ..."


# You can write S2I scripts in any programming language, as long as the 
# scripts are executable inside the builder image.